package bot

import (
	"fmt"
	"runtime"
	"time"
)

// BotMetrics —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
type BotMetrics struct {
	StartTime       time.Time
	CommandsTotal   int64
	MessagesTotal   int64
	ErrorsTotal     int64
	ActiveChats     int
	LastError       string
	LastErrorTime   time.Time
	OpenAIRequests  int64
	MemoryUsage     uint64
}

var metrics = &BotMetrics{
	StartTime: time.Now(),
}

// IncrementCommands —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
func IncrementCommands() {
	metrics.CommandsTotal++
}

// IncrementMessages —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π  
func IncrementMessages() {
	metrics.MessagesTotal++
}

// IncrementErrors —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
func IncrementErrors(err string) {
	metrics.ErrorsTotal++
	metrics.LastError = err
	metrics.LastErrorTime = time.Now()
}

// IncrementOpenAI —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI
func IncrementOpenAI() {
	metrics.OpenAIRequests++
}

// UpdateActiveChats –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
func UpdateActiveChats(count int) {
	metrics.ActiveChats = count
}

// GetMetrics –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
func GetMetrics() string {
	var m runtime.MemStats
	runtime.ReadMemStats(&m)
	
	uptime := time.Since(metrics.StartTime)
	
	return fmt.Sprintf(`üìä *–ú–µ—Ç—Ä–∏–∫–∏ –±–æ—Ç–∞*

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: %v
üì© –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: %d
üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: %d
üî• –ó–∞–ø—Ä–æ—Å—ã OpenAI: %d
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: %d
‚ùå –û—à–∏–±–æ–∫: %d
üß† –ü–∞–º—è—Ç—å: %.1f MB

%s`, 
		formatDuration(uptime),
		metrics.CommandsTotal,
		metrics.MessagesTotal,
		metrics.OpenAIRequests,
		metrics.ActiveChats,
		metrics.ErrorsTotal,
		float64(m.Alloc)/1024/1024,
		formatLastError(),
	)
}

func formatDuration(d time.Duration) string {
	if d < time.Minute {
		return fmt.Sprintf("%.0fs", d.Seconds())
	}
	if d < time.Hour {
		return fmt.Sprintf("%.0fm", d.Minutes())
	}
	if d < 24*time.Hour {
		return fmt.Sprintf("%.1fh", d.Hours())
	}
	return fmt.Sprintf("%.1fd", d.Hours()/24)
}

func formatLastError() string {
	if metrics.LastError == "" {
		return "üü¢ –û—à–∏–±–æ–∫ –Ω–µ—Ç"
	}
	
	return fmt.Sprintf("üî¥ –ü–æ—Å–ª–µ–¥–Ω—è—è: %s (%v –Ω–∞–∑–∞–¥)", 
		metrics.LastError, 
		formatDuration(time.Since(metrics.LastErrorTime)))
}