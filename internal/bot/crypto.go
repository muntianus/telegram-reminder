package bot

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// CryptoData —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
type CryptoData struct {
	Bitcoin struct {
		USD         float64 `json:"usd"`
		ChangeDay   float64 `json:"usd_24h_change"`
		MarketCap   float64 `json:"usd_market_cap"`
	} `json:"bitcoin"`
	Ethereum struct {
		USD         float64 `json:"usd"`
		ChangeDay   float64 `json:"usd_24h_change"`
		MarketCap   float64 `json:"usd_market_cap"`
	} `json:"ethereum"`
}

// GetCryptoQuotes –ø–æ–ª—É—á–∞–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
func GetCryptoQuotes() (string, error) {
	client := &http.Client{Timeout: 10 * time.Second}
	
	url := "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum&vs_currencies=usd&include_market_cap=true&include_24hr_change=true"
	
	resp, err := client.Get(url)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer resp.Body.Close()
	
	if resp.StatusCode != 200 {
		return "", fmt.Errorf("API –≤–µ—Ä–Ω—É–ª –∫–æ–¥ %d", resp.StatusCode)
	}
	
	var data CryptoData
	if err := json.NewDecoder(resp.Body).Decode(&data); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: %v", err)
	}
	
	return formatCryptoData(data), nil
}

func formatCryptoData(data CryptoData) string {
	btcChange := "üìà"
	if data.Bitcoin.ChangeDay < 0 {
		btcChange = "üìâ"
	}
	
	ethChange := "üìà"
	if data.Ethereum.ChangeDay < 0 {
		ethChange = "üìâ"
	}
	
	return fmt.Sprintf(`üíé *–ö—Ä–∏–ø—Ç–æ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏*

‚Çø *Bitcoin*
üí∞ $%.0f %s %.1f%%
üè¶ Cap: $%.0fB

üî∑ *Ethereum*  
üí∞ $%.0f %s %.1f%%
üè¶ Cap: $%.0fB

üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: %s`,
		data.Bitcoin.USD, btcChange, data.Bitcoin.ChangeDay,
		data.Bitcoin.MarketCap/1e9,
		data.Ethereum.USD, ethChange, data.Ethereum.ChangeDay,
		data.Ethereum.MarketCap/1e9,
		time.Now().Format("15:04"),
	)
}