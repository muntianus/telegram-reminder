name: Build & Deploy

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.x

      - name: Clean Go cache
        run: go clean -cache -modcache -testcache

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Build binary
        run: go build -ldflags="-s -w" -o bot ./cmd/bot

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Restore Docker cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build & Push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USER }}/telegram-reminder:latest
          platforms: linux/amd64,linux/arm64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move Docker cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Deploy to VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} <<'EOSSH'
            set -e
            cd /opt/telegram-reminder/telegram-reminder

            cat <<EOF > .env
            TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            CHAT_ID=${{ secrets.CHAT_ID }}
            LOG_CHAT_ID=${{ secrets.LOG_CHAT_ID }}
            OPENAI_MODEL=${{ secrets.OPENAI_MODEL }}
            DOCKERHUB_USER=${{ secrets.DOCKERHUB_USER }}
              EOF
              sed -i 's/^ *//' .env

            cat .env
            docker compose pull
            docker compose down || true
            docker compose up -d
            docker exec telegram-reminder env | grep TELEGRAM || true
          EOSSH

  deploy-mcp:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN_GITHUB }}

      - name: Deploy GitHub MCP to VPS via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            docker pull ghcr.io/github/github-mcp-server:latest
            docker rm -f github-mcp-server || true
            docker run -d \
              --name github-mcp-server \
              --restart unless-stopped \
              -e GITHUB_PERSONAL_ACCESS_TOKEN="${{ secrets.TOKEN_GITHUB }}" \
              ghcr.io/github/github-mcp-server:latest
