name: Build & Deploy

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.x

      - name: Clean Go cache
        run: go clean -cache -modcache -testcache

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Build binary
        run: go build -ldflags="-s -w" -o bot ./cmd/bot

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Restore Docker cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build & Push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USER }}/telegram-reminder:latest
          platforms: linux/amd64,linux/arm64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move Docker cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Deploy to VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} <<'EOSSH'
            set -e
            cd /opt/telegram-reminder/telegram-reminder

            TELEGRAM_TOKEN="${{ secrets.TELEGRAM_TOKEN }}"
            OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
            CHAT_ID="${{ secrets.CHAT_ID }}"
            LOG_CHAT_ID="${{ secrets.LOG_CHAT_ID }}"
            OPENAI_MODEL="${{ secrets.OPENAI_MODEL }}"
            OPENAI_MAX_TOKENS="${{ secrets.OPENAI_MAX_TOKENS }}"
            OPENAI_TOOL_CHOICE="${{ secrets.OPENAI_TOOL_CHOICE }}"
            LUNCH_TIME="${{ secrets.LUNCH_TIME }}"
            BRIEF_TIME="${{ secrets.BRIEF_TIME }}"
            BLOCKCHAIN_API="${{ secrets.BLOCKCHAIN_API }}"
            ENABLE_WEB_SEARCH="${{ secrets.ENABLE_WEB_SEARCH }}"
            LOG_LEVEL="${{ secrets.LOG_LEVEL }}"
            TASKS_FILE="${{ secrets.TASKS_FILE }}"
            WHITELIST_FILE="${{ secrets.WHITELIST_FILE }}"
            TASKS_JSON="${{ secrets.TASKS_JSON }}"
            DOCKERHUB_USER="${{ secrets.DOCKERHUB_USER }}"

            echo "[üì¶] –û–±–Ω–æ–≤–ª—è–µ–º .env..."
            echo "[üîç] –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
            echo "  TELEGRAM_TOKEN: ${TELEGRAM_TOKEN:0:10}..."
            echo "  OPENAI_API_KEY: ${OPENAI_API_KEY:0:10}..."
            echo "  CHAT_ID: ${CHAT_ID:-–ù–ï_–ù–ê–°–¢–†–û–ï–ù}"
            echo "  OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4.1}"
            echo "  DOCKERHUB_USER: ${DOCKERHUB_USER}"

cat <<EOF > .env
TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
OPENAI_API_KEY=${OPENAI_API_KEY}
CHAT_ID=${CHAT_ID}
LOG_CHAT_ID=${LOG_CHAT_ID}
OPENAI_MODEL=${OPENAI_MODEL}
OPENAI_MAX_TOKENS=${OPENAI_MAX_TOKENS}
OPENAI_TOOL_CHOICE=${OPENAI_TOOL_CHOICE}
LUNCH_TIME=${LUNCH_TIME}
BRIEF_TIME=${BRIEF_TIME}
BLOCKCHAIN_API=${BLOCKCHAIN_API}
ENABLE_WEB_SEARCH=${ENABLE_WEB_SEARCH}
LOG_LEVEL=${LOG_LEVEL}
TASKS_FILE=${TASKS_FILE:-tasks.yml}
TASKS_JSON=${TASKS_JSON}
WHITELIST_FILE=${WHITELIST_FILE}
DOCKERHUB_USER=${DOCKERHUB_USER}
EOF

            echo "[üìã] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ .env:"
            cat .env

            echo "[üîç] –ü—Ä–æ–≤–µ—Ä—è–µ–º docker-compose.yml..."
            if [ ! -f docker-compose.yml ]; then
              echo "[‚ö†Ô∏è] –ù–µ –Ω–∞–π–¥–µ–Ω docker-compose.yml ‚Äî —Å–æ–∑–¥–∞—ë–º..."
              printf '%s\n' \
                "services:" \
                "  telegram-reminder:" \
                "    image: ${DOCKERHUB_USER}/telegram-reminder:latest" \
                "    container_name: telegram-reminder" \
                "    restart: always" \
                "    env_file:" \
                "      - .env" > docker-compose.yml
            fi

            echo "[üê≥] –ü—É–ª–ª–∏–º –æ–±—Ä–∞–∑ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
            docker pull ${DOCKERHUB_USER}/telegram-reminder:latest
            docker rm -f telegram-reminder || true
            docker compose down || true
            docker compose up -d

            echo "[‚úÖ] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥–Ω—è—Ç. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å..."
            sleep 2
            docker compose ps

            echo "[üîç] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ..."
            docker exec telegram-reminder env | grep -E "(OPENAI|TELEGRAM)" || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤"

            echo "[üìã] –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫):"
            docker logs telegram-reminder --tail 10 || echo "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

            echo "[‚úÖ] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞..."
            if ! docker inspect -f '{{.State.Running}}' telegram-reminder | grep true; then
              echo "[‚ùå] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
              exit 1
            fi

            echo "[üéâ] –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ."
EOSSH

  deploy-mcp:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN_GITHUB }}

      - name: Deploy GitHub MCP to VPS via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            docker pull ghcr.io/github/github-mcp-server:latest
            docker rm -f github-mcp-server || true
            docker run -d \
              --name github-mcp-server \
              --restart unless-stopped \
              -e GITHUB_PERSONAL_ACCESS_TOKEN="${{ secrets.TOKEN_GITHUB }}" \
              ghcr.io/github/github-mcp-server:latest
