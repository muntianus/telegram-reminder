name: Build & Deploy

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.x

      - name: Clean Go cache
        run: go clean -cache -modcache -testcache

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Build binary
        run: go build -ldflags="-s -w" -o bot .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build & Push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USER }}/telegram-reminder:latest
          platforms: linux/amd64,linux/arm64

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Deploy to VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} <<'EOF'
            set -e
            cd /opt/telegram-reminder/telegram-reminder

            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ GitHub Secrets
            DOCKERHUB_USER="${{ secrets.DOCKERHUB_USER }}"
            TELEGRAM_TOKEN="${{ secrets.TELEGRAM_TOKEN }}"
            OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
            CHAT_ID="${{ secrets.CHAT_ID }}"

            echo "[üì¶] –û–±–Ω–æ–≤–ª—è–µ–º .env..."
            printf '%s\n' \
              "TELEGRAM_TOKEN=${TELEGRAM_TOKEN}" \
              "OPENAI_API_KEY=${OPENAI_API_KEY}" \
              "CHAT_ID=${CHAT_ID}" \
              "DOCKERHUB_USER=${DOCKERHUB_USER}" > .env

            echo "[üîç] –ü—Ä–æ–≤–µ—Ä—è–µ–º docker-compose.yml..."
            if [ ! -f docker-compose.yml ]; then
              echo "[‚ö†Ô∏è] –ù–µ –Ω–∞–π–¥–µ–Ω docker-compose.yml ‚Äî —Å–æ–∑–¥–∞—ë–º..."
              printf '%s\n' \
                "services:" \
                "  telegram-reminder:" \
                "    image: ${DOCKERHUB_USER}/telegram-reminder:latest" \
                "    container_name: telegram-reminder" \
                "    restart: always" \
                "    env_file:" \
                "      - .env" > docker-compose.yml
            fi

            echo "[üê≥] –ü—É–ª–ª–∏–º –æ–±—Ä–∞–∑ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
            docker pull ${DOCKERHUB_USER}/telegram-reminder:latest
            docker rm -f telegram-reminder || true
            docker compose down || true
            docker compose up -d

            echo "[‚úÖ] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥–Ω—è—Ç. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å..."
            sleep 2
            docker compose ps

            echo "[‚úÖ] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞..."
            if ! docker inspect -f '{{.State.Running}}' telegram-reminder | grep true; then
              echo "[‚ùå] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
              exit 1
            fi

            echo "[üéâ] –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ."
          EOF
